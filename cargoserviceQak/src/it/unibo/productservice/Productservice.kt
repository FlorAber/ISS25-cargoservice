/* Generated by AN DISI Unibo */ 
package it.unibo.productservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.domain.*

class Productservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		  
			val logger = LoggerFactory.getLogger("productservice_actor")  
			clearlog("./logs/app_cargoservice.log") 
		
		//	lateinit var eurekaClient : com.netflix.discovery.DiscoveryClient 
		
		   
		 
		 
		 
		 
		
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						 val Info = "$name | STARTS delegating createProduct to exec_createdelete"  
						CommUtils.outgreen("$name | wait for a while ... ")
						delay(2500) 
						CommUtils.outgreen("$name | registering ...................... ")
						   
						        	logger.info(  sysUtil.logStr(name,Info,"categ0")  )
						        	val b = CommUtils.ckeckEureka( )
						        	CommUtils.outgreen("$name | ckeckEureka: $b ")  
						 
						        	CommUtils.registerService( main.java.EurekaServiceConfig() );
						CommUtils.outgreen("$name | STARTSSSSSSSSSSSSSSSSSSSSS")
						delegate("createProduct", "execcreatedelete") 
						delegate("deleteProduct", "execcreatedelete") 
						CommUtils.outblue(Info)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="handle_getProduct",cond=whenRequest("getProduct"))
					transition(edgeName="t07",targetState="handle_getAllProducts",cond=whenRequest("getAllProducts"))
				}	 
				state("handle_getProduct") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						delegateCurrentMsgTodynamic("exec_get") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="handle_getProduct",cond=whenRequest("getProduct"))
					transition(edgeName="t09",targetState="handle_getAllProducts",cond=whenRequest("getAllProducts"))
				}	 
				state("handle_getAllProducts") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						delegateCurrentMsgTodynamic("exec_getall") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t010",targetState="handle_getProduct",cond=whenRequest("getProduct"))
					transition(edgeName="t011",targetState="handle_getAllProducts",cond=whenRequest("getAllProducts"))
				}	 
			}
		}
} 
