/* Generated by AN DISI Unibo */ 
package it.unibo.cargorobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Cargorobot ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(500) 
						CommUtils.outblue("CargoRobot STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outblue("CargoRobot IDLE...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handleLoad",cond=whenDispatch("load"))
				}	 
				state("handleLoad") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("load(SLOT)"), Term.createTerm("load(SLOT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblue("CargoRobot loading at slot ${payloadArg(0)}")
								 val slot = payloadArg(0)  
								request("moverobot", "moverobot(slot,0)" ,"mock_basicrobot" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t15",targetState="loadSuccess",cond=whenReply("moverobotdone"))
					transition(edgeName="t16",targetState="loadFailed",cond=whenReply("moverobotfailed"))
				}	 
				state("loadSuccess") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moverobotdone(ARG)"), Term.createTerm("moverobotok(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblue("CargoRobot movement successful")
								forward("movedone", "movedone("success")" ,"cargomanager" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("loadFailed") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moverobotfailed(PLANDONE,PLANTODO)"), Term.createTerm("moverobotfailed(PLANDONE,PLANTODO)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outred("CargoRobot movement failed")
								 x = payloadArg(0)
								               y = payloadArg(1)
								forward("movefailed", "movefailed(x,y)" ,"cargomanager" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
} 
