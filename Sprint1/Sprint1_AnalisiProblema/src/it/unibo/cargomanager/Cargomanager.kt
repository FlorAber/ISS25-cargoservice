/* Generated by AN DISI Unibo */ 
package it.unibo.cargomanager

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Cargomanager ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 var currentProductId = 0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(500) 
						CommUtils.outmagenta("CargoManager STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outmagenta("CargoManager IDLE...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="handleLoadRequest",cond=whenRequest("loadrequest"))
					transition(edgeName="t08",targetState="handleDeposit",cond=whenDispatch("doDeposit"))
				}	 
				state("handleLoadRequest") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("loadrequest(PID)"), Term.createTerm("loadrequest(PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 currentProductId = payloadArg(0).toInt()  
								CommUtils.outmagenta("CargoManager received load request for product $currentProductId")
								request("control_product", "control_product(currentProductId)" ,"holdmanager" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t19",targetState="validateProduct",cond=whenReply("getProductAnswer"))
				}	 
				state("validateProduct") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("getProductAnswer(JSONSTRING)"), Term.createTerm("product(JSONSTRING)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outmagenta("CargoManager validating product...")
								answer("loadrequest", "loadaccepted", "loadaccepted(currentProductId)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handleDeposit") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("doDeposit(X)"), Term.createTerm("doDeposit(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outmagenta("CargoManager initiating deposit for slot ${payloadArg(0)}")
								 var = payloadArg(0)  
								forward("load", "load(var)" ,"cargorobot" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitingMove", cond=doswitch() )
				}	 
				state("waitingMove") { //this:State
					action { //it:State
						CommUtils.outmagenta("CargoManager waiting for robot movement...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t210",targetState="depositSuccess",cond=whenDispatch("movedone"))
					transition(edgeName="t211",targetState="depositFailed",cond=whenDispatch("movefailed"))
				}	 
				state("depositSuccess") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("movedone(X)"), Term.createTerm("movedone(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outmagenta("CargoManager: deposit completed successfully")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("depositFailed") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("movefailed(PLANDONE,PLANTODO)"), Term.createTerm("movefailed(PLANDONE,PLANTODO)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outred("CargoManager: deposit failed")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
} 
