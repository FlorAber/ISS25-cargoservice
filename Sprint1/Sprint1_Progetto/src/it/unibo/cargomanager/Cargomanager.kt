/* Generated by AN DISI Unibo */ 
package it.unibo.cargomanager

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Cargomanager ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				var robotReady: Boolean = false
				var databaseReady: Boolean = false
				
				var PID: Int = 0
				var SLOT_TO_LOAD: Int = -1
				
				var currentState: String = ""
				var hasPendingLoad: Boolean = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(250) 
						CommUtils.outgreen("$name : starting")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitForTheOthers", cond=doswitch() )
				}	 
				state("waitForTheOthers") { //this:State
					action { //it:State
						if(  robotReady && databaseReady  
						 ){forward("allready", "allready(0)" ,name ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t0",targetState="robotReady",cond=whenDispatch("robotready"))
					transition(edgeName="t1",targetState="databaseReady",cond=whenDispatch("databaseready"))
					transition(edgeName="t2",targetState="wait",cond=whenDispatch("allready"))
				}	 
				state("robotReady") { //this:State
					action { //it:State
						CommUtils.outgreen("$name : robotmanager ready")
						 robotReady = true  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitForTheOthers", cond=doswitch() )
				}	 
				state("databaseReady") { //this:State
					action { //it:State
						CommUtils.outgreen("$name : productservice ready")
						 databaseReady = true  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitForTheOthers", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						 currentState = "wait"  
						CommUtils.outgreen("$name : waiting for requests...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t3",targetState="checkLoadRequest",cond=whenRequest("loadrequest"))
					interrupthandle(edgeName="t4",targetState="handleAlert",cond=whenEvent("sonaralert"),interruptedStateTransitions)
				}	 
				state("checkLoadRequest") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("loadrequest(PID)"), Term.createTerm("loadrequest(PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												PID = payloadArg(0).toInt();
								CommUtils.outgreen("$name : Asking for pid: $PID")
								request("controlproduct", "controlproduct($PID)" ,"holdmanager" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t5",targetState="productAccepted",cond=whenReply("productaccepted"))
					transition(edgeName="t6",targetState="productRejected",cond=whenReply("productrejected"))
				}	 
				state("productRejected") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("productrejected(MSG)"), Term.createTerm("productrejected(ERRORPAYLOAD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val ERRORPAYLOAD = payloadArg(0)  
								CommUtils.outgreen("$name : received error $ERRORPAYLOAD")
								answer("loadrequest", "loadrejected", "loadrejected($ERRORPAYLOAD)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("productAccepted") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("productaccepted(SLOT)"), Term.createTerm("productaccepted(SLOT_TO_LOAD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  SLOT_TO_LOAD=payloadArg(0).toInt()   
								CommUtils.outgreen("$name : product $PID accepted and assigned to slot $SLOT_TO_LOAD")
								answer("loadrequest", "loadaccepted", "loadaccepted($PID)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitForDeposit", cond=doswitch() )
				}	 
				state("waitForDeposit") { //this:State
					action { //it:State
						 currentState = "waitForDeposit"  
						CommUtils.outgreen("$name : waiting for sonar deposit signal")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t7",targetState="doDeposit",cond=whenDispatch("doDeposit"))
					interrupthandle(edgeName="t8",targetState="handleAlert",cond=whenEvent("sonaralert"),interruptedStateTransitions)
				}	 
				state("doDeposit") { //this:State
					action { //it:State
						 currentState = "doDeposit"  
						CommUtils.outgreen("$name : package detected, proceeding with the loading")
						request("load", "load($SLOT_TO_LOAD)" ,"cargorobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t9",targetState="loadEnded",cond=whenEvent("productloaded"))
					interrupthandle(edgeName="t10",targetState="handleAlert",cond=whenEvent("sonaralert"),interruptedStateTransitions)
				}	 
				state("loadEnded") { //this:State
					action { //it:State
						CommUtils.outgreen("$name : loading process ended")
						  		
									PID = 0;
									SLOT_TO_LOAD = -1;
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleAlert") { //this:State
					action { //it:State
						CommUtils.outred("$name : sonar in alert state")
						emit("stopthesystem", "stopthesystem(0)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t11",targetState="resumeOperations",cond=whenEvent("sonarok"))
				}	 
				state("resumeOperations") { //this:State
					action { //it:State
						CommUtils.outred("$name : sonar exited from alert state")
						emit("resumethesystem", "resumethesystem(0)" ) 
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
