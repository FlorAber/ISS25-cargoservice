/* Generated by AN DISI Unibo */ 
package it.unibo.mockactor

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Mockactor ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				var ERROR = false;
				var COUNTLOADS = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(3000) 
						CommUtils.outcyan("$name : starting")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="load_test", cond=doswitch() )
				}	 
				state("load_test") { //this:State
					action { //it:State
						 COUNTLOADS++  
						delay(5000) 
						if(  COUNTLOADS < 4  
						 ){CommUtils.outcyan("$name : richiesta! ")
						request("loadrequest", "loadrequest($COUNTLOADS)" ,"cargomanager" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t30",targetState="deposit",cond=whenReply("loadaccepted"))
					transition(edgeName="t31",targetState="loadFail",cond=whenReply("loadrejected"))
				}	 
				state("deposit") { //this:State
					action { //it:State
						CommUtils.outcyan("$name : PID found, proceeding to do Deposit")
						forward("doDeposit", "doDeposit(1)" ,"cargomanager" ) 
						delay(3000) 
						emit("sonaralert", "sonaralert(0)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="load_test", cond=doswitch() )
				}	 
				state("loadFail") { //this:State
					action { //it:State
						 ERROR = true  
						if( checkMsgContent( Term.createTerm("loadrejected(X)"), Term.createTerm("loadrejected(ERRORPAYLOAD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val ERRORPAYLOAD = payloadArg(0) 
								CommUtils.outred("$ERRORPAYLOAD")
						}
						CommUtils.outred("PID not found")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("end") { //this:State
					action { //it:State
						if(  ERROR == true  
						 ){CommUtils.outcyan("$name : Failed")
						}
						else
						 {CommUtils.outcyan("$name : Success")
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="load_test", cond=doswitch() )
				}	 
			}
		}
} 
