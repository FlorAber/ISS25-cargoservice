System sprint1_core_business
//mock to cargomanager
Request loadrequest:	loadrerequest(pid)

//Mock 
Dispatch doDeposit:		doDeposit(X)				

//cargomanager	to mock
Reply loadaccepted:		loadaccepted(X) for loadrequest
Reply loadrejected:		loadrejected(X) for loadrequest

//cargomanager	to holdmanager
Request controlproduct : controlproduct(pid)



//holdmanager to cargomanager
Reply productaccepted:		productaccepted(X) for controlproduct
Reply productjected:		productjected(X) for controlproduct

//cargomanager (to cargorobot)
Dispatch load : load(SLOT)


//cargorobot to cargomanager
Reply movedone : movedone(X) 
Reply movefailed : movefailed(PLANDONE, PLANTODO)

//cargorobot (to basic robot)
Request moverobot : moverobot(X,Y)
Reply moverobotdone  :  moverobotok(ARG)                    for moverobot
Reply moverobotfailed:  moverobotfailed(PLANDONE, PLANTODO) for moverobot
 


//holdmanager to productservice
Request getProduct : product(id)
Reply getProductAnswer: product( JSonString ) for getProduct// formato di messaggio coerente con product service
										//tutte le info anche in caso di fail sono contenute nel json
												


Context ctx_cargo  ip  [host="localhost" port=8014]

Context ctx_cargorobot  ip  [host="localhost" port=8017]

Context ctx_test  ip  [host="localhost" port=8018]

Context ctx_basicrobot  ip  [host="localhost" port=8020]
Context ctx_productservice ip [ host="localhost" port=8111]


ExternalQActor productservice context ctx_productservice
ExternalQActor basicrobot context ctx_basicrobot

QActor cargomanager context ctx_cargo { 
	State s0 initial{
		delay 500   
		println("$name STARTS") color green 
		request holdmanager -m controlproduct : controlproduct(1)
		forward cargorobot -m load : load(1) //num slot 
			
	}Transition t0
		
}


QActor cargorobot context ctx_cargorobot{ 
	State s0 initial{
		delay 500   
		println("$name STARTS") color green 
		request basicrobot -m moverobot : moverobot(1,2)
	} 
	Goto idle 
	State idle{
		println("$name IDLE...")
	}
}

QActor mockactor context ctx_test{
	State s0 initial{
		delay 500   
		println("$name STARTS") color green 
	} 
	Goto load
	State load{
		request cargomanager -m loadrequest : loadrequest(1) 
		forward cargomanager -m doDeposit : doDeposit(1)
		
	}
}

QActor holdmanager context ctx_cargo{
	State s0 initial{
		delay 500   
		println("$name STARTS") color green 
		request productservice -m getProduct : product(1) 
	} 
	Goto idle 
	State idle{
		println("$name IDLE...")
	}
}

