/* Generated by AN DISI Unibo */ 
package it.unibo.cargorobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.kotlin.*

class Cargorobot ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				var moving: Boolean = false			//Indica se il robot si stava muovendo, necessario per ripartire dopo interrupt
				var destination = ""	//Se moving a true, utilizzato per portare il robot alla stessa destinazione di quando è stato interrotto
				
				var TARGETSLOT = -1
				var currentState = -1 //Contiene un numero che indica lo stato in cui si trova, serve per ripartire dopo l'alert del sonar
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(500) 
						CommUtils.outyellow("$name : starting")
						solve("consult('pointPicker.pl')","") //set resVar	
						solve("consult('positions.pl')","") //set resVar	
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="engage", cond=doswitch() )
				}	 
				state("engage") { //this:State
					action { //it:State
						CommUtils.outyellow("$name : engaging basicrobot")
						request("engage", "engage($MyName,350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t12",targetState="wait",cond=whenReply("engagedone"))
					transition(edgeName="t13",targetState="engage",cond=whenReply("engagerefused"))
				}	 
				state("wait") { //this:State
					action { //it:State
						delay(500) 
						 currentState = 0  
						if( checkMsgContent( Term.createTerm("engagedone(ARG)"), Term.createTerm("engagedone(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var ARG = payloadArg(0)  
								CommUtils.outyellow("$name : robot engaged, response - $ARG")
								forward("robotready", "robotready(0)" ,"cargomanager" ) 
						}
						CommUtils.outyellow("$name : waiting for movement requests")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t14",targetState="movetoioport",cond=whenRequest("load"))
					transition(edgeName="t15",targetState="systemStopped",cond=whenEvent("stopthesystem"))
				}	 
				state("movetoioport") { //this:State
					action { //it:State
						delay(2000) 
						if( checkMsgContent( Term.createTerm("load(SLOT)"), Term.createTerm("load(SLOT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												TARGETSLOT = payloadArg(0).toInt()
												val DEST = Pos.ioport.name
								solve("getPoint($DEST,TX,TY,TDIR)","") //set resVar	
								
								
												val X = getCurSol("TX").toString();
												val Y = getCurSol("TY").toString();
												val D = getCurSol("TDIR").toString();
												
												
												destination=DEST
												moving = true
												
								CommUtils.outyellow("$name : moving robot to slot IOPORT at Positions ($X,$Y)")
								request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t16",targetState="movetoslot",cond=whenReply("moverobotdone"))
					transition(edgeName="t17",targetState="movefailed",cond=whenReply("moverobotfailed"))
					interrupthandle(edgeName="t18",targetState="systemStopped",cond=whenEvent("stopthesystem"),interruptedStateTransitions)
				}	 
				state("movetoslot") { //this:State
					action { //it:State
						delay(2000) 
						if( checkMsgContent( Term.createTerm("moverobotdone(ARG)"), Term.createTerm("moverobotdone(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val slot = "slot$TARGETSLOT"      
												val DEST = Pos.valueOf(slot).name
								
								solve("getPoint($DEST,TX,TY,TDIR)","") //set resVar	
								
								
												val X = getCurSol("TX").toString();
												val Y = getCurSol("TY").toString();
												val D = getCurSol("TDIR").toString();
												
												
												
												moving = true
												destination = TARGETSLOT.toString()
											
								CommUtils.outyellow("$name : moving robot to slot $TARGETSLOT at Positions ($X,$Y)")
								request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t19",targetState="movetohome",cond=whenReply("moverobotdone"))
					transition(edgeName="t20",targetState="movefailed",cond=whenReply("moverobotfailed"))
					interrupthandle(edgeName="t21",targetState="systemStopped",cond=whenEvent("stopthesystem"),interruptedStateTransitions)
				}	 
				state("movetohome") { //this:State
					action { //it:State
						delay(2000) 
						if( checkMsgContent( Term.createTerm("moverobotdone(ARG)"), Term.createTerm("moverobotdone(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								val DEST = Pos.home.name 
								solve("getPoint($DEST,TX,TY,TDIR)","") //set resVar	
								
								
												val X = getCurSol("TX").toString();
												val Y = getCurSol("TY").toString();
												val D = getCurSol("TDIR").toString();
												
												
												
												moving = true
												destination = DEST
											
								CommUtils.outyellow("$name : moving robot to slot HOME at Position ($X,$Y)")
								request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t22",targetState="ended",cond=whenReply("moverobotdone"))
					transition(edgeName="t23",targetState="movefailed",cond=whenReply("moverobotfailed"))
					interrupthandle(edgeName="t24",targetState="systemStopped",cond=whenEvent("stopthesystem"),interruptedStateTransitions)
				}	 
				state("ended") { //this:State
					action { //it:State
						 
									moving = false
									TARGETSLOT = -1 
						emit("productloaded", "productloaded($TARGETSLOT)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("systemStopped") { //this:State
					action { //it:State
						CommUtils.outred("$name : system forced to stop ")
						emit("alarm", "alarm(blokkabilly)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t25",targetState="robotStopped",cond=whenReply("moverobotdone"))
					transition(edgeName="t26",targetState="robotStopped",cond=whenReply("moverobotfailed"))
				}	 
				state("robotStopped") { //this:State
					action { //it:State
						CommUtils.outred("$name : robot movement stopped")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t27",targetState="resumeRobot",cond=whenEvent("resumethesystem"))
				}	 
				state("resumeRobot") { //this:State
					action { //it:State
						CommUtils.outred("$name : robot movement resumed")
						if(  moving  
						 ){val DEST = destination 
						solve("getPoint($DEST,TX,TY,TDIR)","") //set resVar	
						
						
										val X = getCurSol("TX").toString();
										val Y = getCurSol("TY").toString();
										val D = getCurSol("TDIR").toString();
										
										
										
										moving = true			
						request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						}
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("movefailed") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moverobotfailed(PLANDONE,PLANTODO)"), Term.createTerm("moverobotfailed(PLANDONE,PLANTODO)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	
												val PLANDONE = payloadArg(0) 
												val PLANTODO = payloadArg(1)
								CommUtils.outyellow("$name : robot movement ended with failure - done($PLANDONE) todo($PLANTODO)")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
